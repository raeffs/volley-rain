@model VolleyRain.Models.EventCreation

@{
    ViewBag.Title = "Create";
}

<h2>Neuer Termin</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">

        @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, new { @class = "control-label col-sm-2 hidden-xs" })
            <div class="col-sm-10">
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.Name) })
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, new { @class = "control-label col-sm-2 hidden-xs" })
            <div class="col-sm-10">
                @Html.TextBoxFor(model => model.Description, new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.Description) })
                @Html.ValidationMessageFor(model => model.Description)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Location, new { @class = "control-label col-sm-2 hidden-xs" })
            <div class="col-sm-10">
                @Html.TextBoxFor(model => model.Location, new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.Location) })
                @Html.ValidationMessageFor(model => model.Location)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Type, new { @class = "control-label col-sm-2 hidden-xs" })
            <div class="col-sm-10">
                @Html.DropDownListFor(model => model.Type.ID, (SelectList)ViewBag.EventTypes, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Type)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, new { @class = "control-label col-sm-2 hidden-xs" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.StartDate, new { @class = "form-control datepicker" })
                @Html.ValidationMessageFor(model => model.StartDate)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, new { @class = "control-label col-sm-2 hidden-xs" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.EndDate, new { @class = "form-control datepicker" })
                @Html.ValidationMessageFor(model => model.EndDate)
            </div>
        </div>

        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(model => model.FullTime, new { id = "toggle-fulltime" }) @Html.DisplayNameFor(model => model.FullTime)
                    </label>
                </div>
            </div>
        </div>

        <div class="form-group input-time">
            @Html.LabelFor(model => model.StartTime, new { @class = "control-label col-sm-2 hidden-xs" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.StartTime, new { @class = "form-control timepicker" })
                @Html.ValidationMessageFor(model => model.StartTime)
            </div>
        </div>

        <div class="form-group input-time">
            @Html.LabelFor(model => model.EndTime, new { @class = "control-label col-sm-2 hidden-xs" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.EndTime, new { @class = "form-control timepicker" })
                @Html.ValidationMessageFor(model => model.EndTime)
            </div>
        </div>

        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(model => model.RecurrsWeekly, new { id = "toggle-recurrence" }) @Html.DisplayNameFor(model => model.RecurrsWeekly)
                    </label>
                </div>
            </div>
        </div>

        <div class="form-group input-recurrence">
            @Html.LabelFor(model => model.NumberOfRecurrences, new { @class = "control-label col-sm-2 hidden-xs" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.NumberOfRecurrences, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.NumberOfRecurrences)
            </div>
        </div>

        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <input type="submit" value="Speichern" class="btn btn-default btn-success" />
            </div>
        </div>
    </div>
}

<script src="~/Scripts/jquery-ui-1.10.4.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.timepicker.min.js"></script>
<!-- mit dem funzts nicht
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    -->

<script>
    $(function () {
        $('.datepicker').datepicker({
            dateFormat: 'dd.mm.yy',
            firstDay: 1
        });
    });

    $(function () {
        $('.timepicker').timepicker({
            timeFormat: 'H:i',
            step: 30
        });
    });

    $(function () {
        $('#toggle-fulltime').change(function () {
            $('.input-time').toggle(!this.checked);
        }).change();
    });

    $(function () {
        $('#toggle-recurrence').change(function () {
            $('.input-recurrence').toggle(this.checked);
        }).change();
    });
</script>