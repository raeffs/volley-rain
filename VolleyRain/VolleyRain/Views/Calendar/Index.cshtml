@model VolleyRain.Models.Month

@{
    ViewBag.Title = "Kalender";
}

<h2>@Html.DisplayFor(model => model.Date)</h2>

<div class="pager">
    <a href="@Url.Action("Index", new { year = Model.PreviousMonth.Year, month = Model.PreviousMonth.Month })" class="btn btn-primary pull-left btn-responsive">
        <span class="glyphicon glyphicon-chevron-left"></span> @Html.DisplayFor(model => model.PreviousMonth)
    </a>
    <a href="@Url.Action("Index", new { year = Model.NextMonth.Year, month = Model.NextMonth.Month })" class="btn btn-primary pull-right btn-responsive">
        @Html.DisplayFor(model => model.NextMonth) <span class="glyphicon glyphicon-chevron-right"></span>
    </a>
    
    <a href="@Url.Action("Export")" class="btn btn-success btn-responsive">Exportieren</a>
</div>

<table class="table table-condensed table-calendar">
    <thead>
        <tr>
            <th>Mo</th>
            <th>Di</th>
            <th>Mi</th>
            <th>Do</th>
            <th>Fr</th>
            <th>Sa</th>
            <th>So</th>
        </tr>
    </thead>
    <tbody>
        @{
            TagBuilder headBuilder = null;
            TagBuilder bodyBuilder = null;
        }
        @foreach (var day in Model.Days)
        {
            if (headBuilder == null)
            {
                headBuilder = new TagBuilder("tr");
                headBuilder.AddCssClass("head");
            }
            if (bodyBuilder == null)
            {
                bodyBuilder = new TagBuilder("tr");
                bodyBuilder.AddCssClass("body");
            }
            
            var tdBuilder = new TagBuilder("td");
            if (!day.IsInsideMonth)
            {
                tdBuilder.AddCssClass("fadeout"); 
            }
            if (day.IsToday)
            {
                tdBuilder.AddCssClass("today");
            }
            var aBuilder = new TagBuilder("a");
            if (HttpContext.Current.User.IsTeamAdministrator())
            {
                aBuilder.MergeAttribute("href", Url.Action("Create", "Event"));
            }
            else
            {
                aBuilder.MergeAttribute("href", "#");
            }
            var spanBuilder = new TagBuilder("span");
            if (day.Date.Day == 1)
            {
                spanBuilder.SetInnerText(day.Date.ToString("d. MMM"));
            }
            else
            {
                spanBuilder.SetInnerText(day.Date.Day.ToString());
            }
            aBuilder.InnerHtml = spanBuilder.ToString();
            tdBuilder.InnerHtml = aBuilder.ToString();
            headBuilder.InnerHtml += tdBuilder.ToString();

            tdBuilder = new TagBuilder("td");
            if (!day.IsInsideMonth)
            {
                tdBuilder.AddCssClass("fadeout");
            }
            if (day.IsToday)
            {
                tdBuilder.AddCssClass("today");
            }
            foreach (var @event in day.Events)
            {
                aBuilder = new TagBuilder("a");
                if (HttpContext.Current.User.IsTeamAdministrator())
                {
                    aBuilder.MergeAttribute("href", Url.Action("Delete", "Event", new { eventID = @event.ID }));
                }
                else
                {
                    aBuilder.MergeAttribute("href", "#");
                }
                spanBuilder = new TagBuilder("span");
                spanBuilder.AddCssClass("label");
                spanBuilder.AddCssClass(@event.GetCssClass());
                spanBuilder.SetInnerText(@event.Name);
                aBuilder.InnerHtml = spanBuilder.ToString();
                tdBuilder.InnerHtml += aBuilder.ToString();
            }
            bodyBuilder.InnerHtml += tdBuilder.ToString();

            if (day.Date.DayOfWeek == DayOfWeek.Sunday)
            { 
                @Html.Raw(headBuilder.ToString())
                @Html.Raw(bodyBuilder.ToString())
                
                headBuilder = null;
                bodyBuilder = null;
            }
        }
    </tbody>
</table>
